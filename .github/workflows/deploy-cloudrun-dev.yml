name: Deploy to Cloud Run

on:
  push:
    branches: [ list-rollback ]

env:
  PROJECT_ID: botflow-builder
  REGION: us-west1
  REPOSITORY: us-west1-docker.pkg.dev/tecpet-cloud/botflow
  BRANCH: list-rollback
  NEW_VERSION: dev

jobs:
  deploy:
    name: Build, Release e Deploy (${{ matrix.scope }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scope: [builder, viewer]

    permissions:
      contents: write
      id-token: write

    steps:
      - name: 🔧 Configurar variáveis do scope
        run: |
          echo "SERVICE_NAME=botflow-${{ matrix.scope }}-dev" >> $GITHUB_ENV
          echo "IMAGE_NAME=botflow-${{ matrix.scope }}" >> $GITHUB_ENV
          echo "SCOPE=${{ matrix.scope }}" >> $GITHUB_ENV

      - name: 🔄 Checkout do repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Usar Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: 🔐 Autenticar no Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          token_format: access_token

      - name: 🛠️ Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Configurar Docker para Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: us-west1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: 🏗️ Build e push da imagem Docker
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          build-args: |
            SCOPE=${{ env.SCOPE }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:cache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:cache,mode=max
          tags: |
            ${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.NEW_VERSION }}
            ${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest

      - name: 🚀 Deploy no Cloud Run
        run: |
          echo "🚀 Fazendo deploy no Cloud Run..."
          IMAGE_URI="${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.NEW_VERSION }}"
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=$IMAGE_URI \
            --region=${{ env.REGION }}
          
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "✅ Deploy realizado com sucesso!"

      - name: 🌐 Obter URL do Cloud Run
        id: url
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
